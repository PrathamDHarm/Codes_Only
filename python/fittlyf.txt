#Q1.
import math
A = [1, 2, 3, 4, 5, 6]
for x in A:
  print("squre of: ",x," is ",pow(x,2))
print("The sequence has ended")

#Q2.
def numbers_to_strings(argument):
    u = n-1
    g = u-1
    if(argument==1): 
        k = n 
        for i in range(0, n):
            for j in range(0, i):
                print(end=" ")
            for j in range(0, k):
                print("*",end=" ")
            k = k - 1
            print("\r")
    elif(argument==2):
        k = n 
        for i in range(0, n):
            for j in range(0, i):
                print(end=" ")
            for j in range(0, k):
                print("*",end=" ")
            k = k - 1
            print("\r")
        for l in range(0,u):
            for m in range(0, g):
                print(end=" ")
            g = g-1
            for s in range(0, l+2):
                print("_",end="  ")
            print("\r")
            
        
n = 5

if __name__ == "__main__":
    argument=int(input("enter the number: 1 or 2"))
    if(argument==1 or argument==2):
        print (numbers_to_strings(argument))
    else:
        print("Invalid Input")

#Q3.
t_1 = (1,4,9,16,25,36)
t_m=[]
for i in range(0,len(t_1)):
     x=pow(t_1[i],2)
     t_m.append(x)
     t_modified=tuple(t_m)
print("t_1: ",t_1)
print("t_modified: ",t_modified)
print("Element at index 4 of t_modified: ", t_modified[4])
t_sliced=t_modified[1:4]
print("t_sliced: ",t_sliced)

#Q4.
These tuples are an ordered collection of elements of different data types. 
          Furthermore, we represent them by writing the elements inside the parenthesis separated by commas.
          We can also define tuples as lists that we cannot change.
          Therefore, we can call them immutable tuples.
          Immutable mean not changeable enything.

#Q5.
frozenset1={'C', 'A', 'B', 'D'}
print("frozen_set_1: frozenset(",frozenset1,")")
frozenset2={2, 'A', 'C', 4}
print("frozen_set_2: frozenset(",frozenset2,")")
frozenset_union=frozenset1.union(frozenset2)
print("frozen_union: frozenset(",frozenset_union,")")
frozenset_common=frozenset1.intersection(frozenset2)
print("frozenset_common: frozenset(",frozenset_common,")")
frozenset_difference=frozenset1.difference(frozenset2)
print("frozenset_difference: frozenset(",frozenset_difference,")")
frozenset_distinct=frozenset1.symmetric_difference(frozenset2)
print("frozenset_distinct: frozenset(",frozenset_distinct,")")

#Q6.
def remove_items_containing_a_or_A(list_a):
    for i in range(len(list_a)):
       if ('a' in list_a[i])or ('A' in list_a[i]):
           list_b.append(list_a[i])
    result = list(filter(lambda x:x not in list_b,list_a))
    return result
list_a=['car','place','tree','under','grass','price']
list_b=[]    
print(remove_items_containing_a_or_A(list_a))

#Q7.
list_a = [1, 2, 3, 4, 5]
class IndexError(Exception):
    def __init__(self, value):
        self.value = value
try:
    n = int(input("enter a index to print the list elements: "))
    if (n >= -5) and (n <= 4):
        print(list_a[n])
    else:
        raise IndexError("The index is incorrect and index should lie between -5 and 4.")
except ValueError:
    print("Use an Integer value as the input.")

 




